name: Refresh coveo searchToken for docs dev/staging/production
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  generate-coveo-search-token:
    name: Generate Coveo Search Tokens
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - env_name: dev
            env_api_key: "COVEO_API_DEV"
          - env_name: staging
            env_api_key: "COVEO_API_STAGING"
          - env_name: prod
            env_api_key: "COVEO_API_PROD"
    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Generating token for ${{matrix.env_name}} ...
        env:
          COVEO_ORG_ID: "f5networksproduction5vkhn00h"
          COVEO_API_KEY: ${{secrets[matrix.env_api_key]}}
          COVEO_SEARCH_HUB: "HUB_ES_Nginx_Docs_And_Org"
        run: |
          RESPONSE=$(curl -w "\nHTTP_CODE: %{http_code}" -s -X POST "https://${COVEO_ORG_ID}.org.coveo.com/rest/search/v2/token" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${COVEO_API_KEY}" \
          -d '{
              "searchHub": "'${COVEO_SEARCH_HUB}'",
              "organization": "'${COVEO_ORG_ID}'",
              "userIds": [
                  {
                  "type": "User",
                  "name": "anonymous",
                  "provider": "Email Security Provider"
                  }
              ]
              }')
          STATUS_CODE=$(echo "$RESPONSE" | grep HTTP_ | awk '{print $2}')
          SEARCH_TOKEN=$(echo "$RESPONSE" | sed '$d' | jq -r '.token')

          if [ $STATUS_CODE -ne 200 ]; then
            echo "Error: HTTP request failed with status $STATUS_CODE"
            exit 1
          fi
          if [ "$SEARCH_TOKEN" == "null" ]; then
            echo "Error: Failed to extract search token from response"
            exit 1
          fi

          mkdir coveo/
          echo "{\"token\": \"$SEARCH_TOKEN\"}" > coveo/search_token.json

      - name: Upload token for ${{matrix.env_name}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.env_name}}
          path: "./"

  push-tokens-to-azure:
    name: Push coveo search tokens to Azure
    runs-on: ubuntu-latest
    needs: generate-coveo-search-token
    steps:
      - name: Download Coveo search token
        uses: actions/download-artifact@v4

      - name: View files
        run: ls -R

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS_DOCS}}

      - name: Retrieve secrets from Keyvault
        id: keyvault
        uses: azure/cli@965c8d7571d2231a54e321ddd07f7b10317f34d9
        with:
          inlineScript: |
            secrets_get=(productionHostname previewHostname resourceGroupName cdnProfileName cdnName accountName)
            for secret_get in ${secrets_get[@]}
            do
              value=$(az keyvault secret show --name $secret_get --vault-name ${{ secrets.AZURE_KEY_VAULT_DOCS }} --query value --output tsv)
              echo "::add-mask::$value"
              echo "$secret_get=$value" >> $GITHUB_OUTPUT
            done

      - name: Push to Azure container storage
        run: |
          az storage blob upload-batch \
            -s ./ \
            -d '$web' \
            --account-name ${{steps.keyvault.outputs.accountName}} \
            --overwrite \
            --auth-mode login

          az cdn endpoint purge \
            --content-paths "/dev/coveo" "/staging/coveo" "/prod/coveo" \
            --profile-name ${{steps.keyvault.outputs.cdnProfileName}} \
            --name ${{steps.keyvault.outputs.cdnName}} \
            --resource-group ${{steps.keyvault.outputs.resourceGroupName}}
